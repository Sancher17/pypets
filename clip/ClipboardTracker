import tkinter as tk
from tkinter import messagebox, scrolledtext
import clipboard

class ClipboardTracker(tk.Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.title("Clipboard Tracker")
        self.geometry("550x600")

        # Set dark theme colors
        self.configure(bg="#333")
        self.style = {"bg": "#333", "fg": "#ccc", "button_bg": "#444", "button_fg": "#ccc"}

        self.clipboard_history = []
        self.current_clipboard = ""

        self.top_frame = tk.Frame(self, bg=self.style["bg"])
        self.top_frame.pack(pady=10, fill=tk.X)

        self.label = tk.Label(self.top_frame, text="Clipboard Tracker", bg=self.style["bg"], fg=self.style["fg"])
        self.label.pack(side=tk.LEFT, padx=10)

        self.save_btn = tk.Button(self.top_frame, text="Save & Exit", command=self.save_and_quit, bg=self.style["button_bg"], fg=self.style["button_fg"])
        self.save_btn.pack(side=tk.RIGHT, padx=10)

        self.search_var = tk.StringVar()
        self.search_var.trace("w", lambda name, index, mode: self.update_display())
        self.search_entry = tk.Entry(self.top_frame, textvariable=self.search_var, bg=self.style["bg"], fg=self.style["fg"], insertbackground=self.style["fg"])
        self.search_entry.pack(side=tk.RIGHT, padx=10, expand=True, fill=tk.X)

        self.clipboard_box = scrolledtext.ScrolledText(self, height=20, width=60, bg="#222", fg="#ccc")
        self.clipboard_box.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        self.check_clipboard()

    def check_clipboard(self):
        try:
            new_clipboard_content = clipboard.paste()
            if new_clipboard_content != self.current_clipboard:
                self.current_clipboard = new_clipboard_content
                self.clipboard_history.append(new_clipboard_content)
                self.clipboard_history = self.clipboard_history[-40:]
                self.update_display()
        except Exception as e:
            print(e)
        finally:
            self.after(1000, self.check_clipboard)

    def update_display(self):
        search_text = self.search_var.get().lower()
        self.clipboard_box.config(state=tk.NORMAL)
        self.clipboard_box.delete(1.0, tk.END)
        for index, content in enumerate(reversed(self.clipboard_history)):
            if search_text in content.lower():
                btn_copy = tk.Button(self.clipboard_box, text="Copy", command=lambda c=content: self.copy_to_clipboard(c), bg=self.style["button_bg"], fg=self.style["button_fg"])
                self.clipboard_box.window_create(tk.END, window=btn_copy)
                btn_delete = tk.Button(self.clipboard_box, text="Delete", command=lambda i=len(self.clipboard_history)-1-index: self.delete_entry(i), bg=self.style["button_bg"], fg=self.style["button_fg"])
                self.clipboard_box.window_create(tk.END, window=btn_delete)
                self.clipboard_box.insert(tk.END, ' ' + content + '\n\n')
        self.clipboard_box.config(state=tk.DISABLED)

    def copy_to_clipboard(self, content):
        clipboard.copy(content)

    def delete_entry(self, index):
        del self.clipboard_history[index]
        self.update_display()

    def save_and_quit(self):
        with open("clipboard.txt", "a") as file:
            for content in self.clipboard_history:
                file.write(content + '\n')
        self.destroy()

if __name__ == "__main__":
    app = ClipboardTracker()
    app.mainloop()
